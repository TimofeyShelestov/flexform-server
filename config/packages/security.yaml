security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User: 'auto'

    providers:
        users_in_memory: { memory: null }
        admin_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        admin_area:
            pattern: ^/admin
            lazy: true
            provider: admin_provider
            access_denied_url: /admin
            form_login:
                login_path: admin_login
                check_path: admin_login
                username_parameter: "login_form[email]"
                password_parameter: "login_form[password]"
            logout:
                path: admin_logout
                target: admin_login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api, roles: PUBLIC_ACCESS }
        - { path: ^/admin/login$, roles: PUBLIC_ACCESS }
        - { path: ^/admin/setup$, roles: PUBLIC_ACCESS }
        - { path: ^/admin/forms/create$, roles: ROLE_ADMIN }
        - { path: ^/admin/forms/[0-9]+/delete$, roles: ROLE_ADMIN }
        - { path: ^/admin/forms/[0-9]+/edit, roles: ROLE_ADMIN }
        - { path: ^/admin/forms/[0-9]+/archive, roles: ROLE_ADMIN }
        - { path: ^/admin/forms/[0-9]+/recover, roles: ROLE_ADMIN }
        - { path: ^/admin/forms/[0-9]+/fields, roles: ROLE_ADMIN }
        - { path: ^/admin/users, roles: ROLE_ADMIN }
        - { path: ^/admin, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
